language: python
python: "3.6"
sudo: true
dist: trusty
osx_image: xcode9.1

addons:
  apt:
    packages:
      - g++-6
      - ninja-build
      - clang-5.0
      - valgrind
    sources: &sources
      - ubuntu-toolchain-r-test
      - llvm-toolchain-trusty-5.0

cache:
  directories:
    - ${HOME}/.conan/data

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

matrix:
  fast_finish: true
#  include:
#    - os: linux
#    - compiler: gcc
#    - env: VALGRIND=true
  allow_failures:
    - os: linux
      compiler: gcc
    - os: linux
      compiler: clang

before_install:
# Workaround for https://github.com/travis-ci/travis-ci/issues/6307
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
      rvm get stable --auto-dotfiles
      brew update
    fi

install:
#  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew outdated cmake || brew upgrade cmake
      brew install gcc
      brew link --overwrite gcc
      brew install ninja
      brew install conan
    else
      CMAKE_URL="https://cmake.org/files/v3.8/cmake-3.8.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${TRAVIS_BUILD_DIR}/cmake/bin:${PATH}
      pip install conan
    fi
  - cmake --version
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CXX" = "g++" ]]; then export CXX="g++-6" CC="gcc-6"; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" && "$CXX" == "g++" ]]; then export CXX="g++-7" CC="gcc-7"; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CXX" == "clang++" ]]; then export CXX="clang++-5.0" CC="clang-5.0"; fi
  - conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan

script:
  - mkdir build && cd build
  - conan install .. --build=missing
#  - cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DGMOCK_TESTS:BOOL=ON ..
#  - cmake --build .
  - conan build ..

after_success:
  - cd bin
  - ./causal_sets_explorer
  - ./unittests
  - if [[ ${VALGRIND} == "true" ]]; then valgrind --leak-check=full --show-leak-kinds=all ./causal_sets_explorer
  # CTest
  - cmake --build .. --target test